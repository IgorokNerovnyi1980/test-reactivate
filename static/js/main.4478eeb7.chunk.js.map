{"version":3,"sources":["components/Button.jsx","components/Geolocation.jsx","helpers/geo.js","components/Slider.jsx","pages/Weather.jsx","helpers/parserColor.js","App.js","index.js"],"names":["Wrapper","styled","button","Button","text","type","fnClick","fnChange","onClick","onChange","name","div","Geolocation","checked","fhChange","useState","location","setLocation","URL","getMyLocation","a","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","console","log","result","axios","get","testApi","Input","input","Slider","value","fnInput","min","max","step","onInput","props","bg","Base","color","setColor","sliderValue","setSliderValue","checkValue","setCheckValue","setInputValue","useEffect","num","arr","split","splice","join","parserColor","handleInputsChange","e","target","GlobalStyle","createGlobalStyle","App","Weather","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4478eeb7.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.button`\n    min-width:50px;\n    max-height:50px;\n    padding:5px 8px;\n    background-color:blue;\n    border:1px solid blue;\n    border-radius:2px;\n    color:white;\n    cursor:pointer;\n    transition:0.2s;\n    \n    :hover{\n        background-color:white;\n        color:blue;\n    }\n    :active{\n        transform:scale(0.95);\n    }\n`;\n\nconst Button = (\n    {\n        text = 'default',\n        type = 'button',\n        fnClick = () => { },\n        fnChange = () => { }\n\n\n    }) => {\n\n    return(\n        <Wrapper\n            type={type}\n            onClick={fnClick}\n            onChange={fnChange}\n            name={text}\n        >\n            {text}\n        </Wrapper>\n    )\n};\n\nexport default Button;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { geoFindMe } from '../helpers/geo';\nimport axios from 'axios';\n//components\nimport Button from './Button'\n\nconst Wrapper = styled.div`\n    position: fixed;\n    top:5%;\n    left:50%;\n    transform:translate(-50%, -50%);\n    min-width:250px;\n    min-height:30px;\n    padding: 0 5px;\n    display:flex;\n    justify-content:space-between;\n    align-items:center;\n    input{\n        cursor:pointer;\n    }\n`;\n\n\nconst Geolocation = (\n    {\n        checked = false,\n        fhChange = () => { },\n\n    }) => {\n\n        const [location, setLocation ] = useState('Determine my position');\n\n        const URL ='www.metaweather.com/api/location/search/?lattlong=';\n        const testCoordinates = '36.96,-122.02';\n        // 36.96,-122.02\n        //50.7403341,31.0297808\n\n        const getMyLocation = async () => {\n            const result = await geoFindMe();\n            setLocation(result);\n            console.log('test Url', `${URL}${testCoordinates}`);\n            const testApi = await axios.get(`${URL}${testCoordinates}`);\n            console.log(testApi);\n        }\n\n    return(\n<Wrapper>\n    <p>{location}</p>\n    <Button\n        type='button'\n        text='Request'\n        fnClick={getMyLocation}\n    />\n         \n    \n</Wrapper>\n    )\n};\n\nexport default Geolocation;","export function geoFindMe() {\n\n  // const status = document.querySelector('#status');\n  // const mapLink = document.querySelector('#map-link');\n\n  // mapLink.href = '';\n  // mapLink.textContent = '';\n\n  function success(position) {\n    const latitude  = position.coords.latitude;\n    const longitude = position.coords.longitude;\n\n  //   status.textContent = '';\n  //   mapLink.href = `https://www.openstreetmap.org/#map=18/${latitude}/${longitude}`;\n  //   mapLink.textContent = `Latitude: ${latitude} °, Longitude: ${longitude} °`;\n  console.log(`Latitude: ${latitude} °, Longitude: ${longitude} °`)\n    return `Latitude: ${latitude} °, Longitude: ${longitude} °`;\n  }\n\n  function error() {\n  //   status.textContent = 'Unable to retrieve your location';\n  return 'Unable to retrieve your location';\n  }\n\n  if (!navigator.geolocation) {\n  //   status.textContent = 'Geolocation is not supported by your browser';\n  return 'Geolocation is not supported by your browser';\n  } else {\n    // status.textContent = 'Locating…';\n    navigator.geolocation.getCurrentPosition(success, error);\n    return 'Locating…';\n  }\n\n};\n\n","import React from 'react';\nimport styled from 'styled-components';\n\n\nconst Wrapper = styled.div`\n    position: fixed;\n    bottom:5%;\n    left:50%;\n    transform:translate(-50%, -50%);\n    min-width:250px;\n    min-height:30px;\n`;\n\nconst Input = styled.input`\n    appearance: none;\n    width: 100%;\n    height: 25px;\n    background: #d3d3d3;\n    border-radius:2px;\n    opacity:.7;\n    transition:.2s;\n    :hover{\n        opacity:1\n    }\n    ::-webkit-slider-thumb {\n    appearance: none;\n    width: 25px;\n    height: 25px;\n    background: blue;\n    border-radius:2px;\n    cursor: pointer; \n}\n`;\n\n\nconst Slider = (\n    {\n        value = 5,\n        fnInput = () => { }\n    }) => {\n\n    return(\n        <Wrapper>\n            <Input\n               type='range'\n               min='1'\n               max='765'\n               step='1'\n               name='slider'\n               value={value}\n               onInput={fnInput}\n            />\n        </Wrapper>\n    )\n};\n\nexport default Slider;","import React,{ useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { parserColor } from '../helpers/parserColor'\n//components\nimport Geolocation from '../components/Geolocation';\nimport Slider from '../components/Slider'\n\nconst Wrapper = styled.div`\n    width:100vw;\n    height:100vh;\n    background-color:${props => `RGB(${props.bg})`};\n`;\n\nconst Base = () => {\n\n    const [ color, setColor ] = useState('0,255,255');\n    const [sliderValue, setSliderValue] = useState(5)\n    const [ checkValue, setCheckValue ] = useState(false);\n    const [ inputValue, setInputValue ] = useState('');\n\n    useEffect(()=>{\n        setColor(parserColor(sliderValue))\n    },[sliderValue])\n\n\n    const handleInputsChange = e => {\n        if(e.target.name === 'myGeolocation'){\n            setCheckValue(e.target.checked)\n        } else if(e.target.name === 'position'){\n            setInputValue(e.target.value);\n        } else if(e.target.name === 'slider'){\n            setSliderValue(e.target.value)\n        }\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        console.log('submit')\n    \n    };\n\n    const handleButtonClick = e => {\n        if(e.target.name === 'Yes'){  \n            setCheckValue(true);\n            localStorage.setItem('resolution', true);\n        }else if(e.target.name === 'No'){\n            setCheckValue(false);\n        }\n    }\n\n\n    return(\n        <Wrapper bg={color}>\n            <Geolocation\n                checked={checkValue}\n                fhChange={handleInputsChange}\n            />\n            <Slider\n                value={sliderValue}\n                fnInput={handleInputsChange}\n            />\n        </Wrapper>\n    )\n};\n\nexport default Base;","export const parserColor = function (num){\n\n    let value = '0,255,255';\n    const arr = value.split(',')\n\n    if(num <= 255){\n        arr.splice(2, 1, (255 - num));\n        return arr.join()\n    }else if(num > 255 && num <= 510){\n        arr.splice(0, 3, (num - 255), 255, 0);\n        return arr.join()\n    }else if(num > 510 && num <= 765){\n        arr.splice(0, 3, 255,(255 - (num-510)), 0);\n        return arr.join()\n    }\n};","import React from 'react';\nimport {createGlobalStyle} from 'styled-components';\n//pages\nimport Weather from './pages/Weather';\n\n\nconst GlobalStyle = createGlobalStyle `\n  * {\n    box-sizing: border-box;\n  }\n\n  *:after, *:before {\n    box-sizing: inherit;\n  }\n\n  p, ul, li, h1, h2, h3, h4 ,h5 ,h6, html, body{\n    margin: 0;\n    padding: 0;\n  }\n  h1, h2, h3, h4,h5, h6{\n    font-weight: normal;\n  }\n  input, button{\n    outline:none;\n    border:none;\n    background:none;\n  }\n\n  body{\n    font-family: 'Helvetica', sans-serif;\n    font-size: 14px;\n    color: #000000;\n    font-weight: 400;\n    min-width: 320px;\n    overflow-x: hidden;\n    background: #ffffff;\n    line-height: normal;\n  }\n\n  input, textarea{\n    outline: none;\n  }\n\n`;\n\nfunction App() {\n\n\n    return (\n        <> \n          < GlobalStyle />\n          <Weather />\n        </>\n    );\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}